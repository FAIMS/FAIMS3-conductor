
<div class="container">
<nav aria-label="breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="/">Home</a></li>
    <li class="breadcrumb-item"><a href="/notebooks/">Notebooks</a></li>
    <li class="breadcrumb-item active" aria-current="page">{{notebook.name}}</li>
  </ol>
</nav>

<h1>{{ notebook.name }}</h1>
<h3>{{ notebook.project_id }}</h3>

<dl>
    <dt>Project Lead</dt><dd>{{notebook.project_lead}}</dd>
    <dt>Description</dt><dd>{{ notebook.pre_description }}</dd>
    <dt>Records</dt><dd>{{ records }}</dd>
    <dt>Download Records as CSV</dt>
    <dd>
      <ul>
        {{#each views}}
         <li>
          <a href="/api/notebooks/{{../notebook.project_id}}/{{this}}.csv">Download {{this}}</a>
          <a href="/api/notebooks/{{../notebook.project_id}}/{{this}}.zip">Download files from {{this}}</a>

         </li>
        {{/each}}
      </ul>
    </dd>

</dl>

{{#if isAdmin}}

{{#if developer}}
<script>
const addRecords = (e) => {
  e.preventDefault();
  const count = document.querySelector('input[name="number"]').value;
  console.log('count', count);
  fetch('/api/notebooks/{{notebook.project_id}}/generate', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({count})
  });
}
</script>

<form>
  <input type="number" value="10" name="number" id="number">
  <button onClick="addRecords(event)">Add Random Records</button>
</form>
{{/if}}

<p>
Users can be invited to roles <a href="/notebooks/{{notebook.project_id}}/invite/">here</a>.
</p>

<table>
  {{#each invites}}
  <tr>

    {{#if this.invite.unlimited}}
    <td>Invite for unlimited users for role "{{this.invite.role}}"</td>
    {{else}}
    <td>Invite for {{this.invite.number}} users for role "{{this.invite.role}}"</td>
    {{/if}}

    <td>
      <button class="btn btn-primary" onclick="copyToClipboard('{{this.url}}')">Copy Registration URL</button>
    </td>
    <td>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#qrModal{{this.invite._id}}">Show QRCode</button>
    <div class="modal modal-fade" 
         id="qrModal{{this.invite._id}}"
          tabindex="-1" aria-labelledby="qrtitle-{{this.invite._id}}" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="qrtitle-{{this.invite._id}}">
            Scan to register for role '{{this.invite.role}}' in <br>
            the {{../notebook.name}} notebook
          </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <img width="100%" src="{{this.qrcode}}" alt="QRCode for {{this.url}}">
        </div>
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
      </div>
    </div>
    </td>
  </tr>
  {{/each}}
</table>


<p><a href="/notebooks/{{notebook.project_id}}/users/">Edit User Roles</a></p>



  <div class="accordion" id="uploadFormContainer">
    <h2 class="accordion-header" id="headingOne">
      <button class="accordion-button collapsed" type="button" 
              data-bs-toggle="collapse" data-bs-target="#collapseOne" 
              aria-expanded="false" aria-controls="collapseOne">
        Update this Notebook
      </button>
    </h2>

    <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#uploadFormContainer">
      <div class="accordion-body">
        <p>Uploading a new version of a notebook can be a risky operation if 
          there are already records in the notebook.  If fields are added or removed
          from the notebook, the existing records will be incompatible with the new 
          notebook and this may cause problems with record display and editing. Export
          of data with mixed records may also be problematic.  
          If you are not confident, create a new notebook instead.
        </p>
        <form id="upload-notebook-form">
          <div class="mb-3">
            <input type="file" class="form-control" name="notebook" id="notebook">
            <div class="form-text">Select a notebook file in JSON format.</div>
          </div>

          <div class="mb-3">
            <input type="submit" class="form-control" value="Upload Notebook">
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

{{/if}}




</div>

  <script>
const copyToClipboard = (text) => {
    navigator.permissions.query({name: "clipboard-write"}).then((result) => {
    if (result.state === "granted" || result.state === "prompt") {
        navigator.clipboard.writeText(text).then(() => {
            alert("Copied to clipboard.")
        }, () => {
                alert("Could not copy text.")
        });
    }
    });
}



  const uploadNotebookHandler = (event) => {
    event.preventDefault();
    const url = '/api/notebooks/{{notebook.project_id}}';
    const form = event.target;
    const fileInput = form.querySelector('[name="notebook"]');
    if (fileInput) {
      // parse the contents of the uploaded file as JSON
      const reader = new FileReader();
      const filename = fileInput.files[0];
      reader.readAsText(filename);
      reader.onload = (evt) => {
        try {
          const data = JSON.parse(evt.target.result);
          // a little bit of validation
          if (!data.metadata || !data['ui-specification']) {
            alert('Invalid notebook file');
            return;
          }
          if (!data.metadata.name) {
            alert('Invalid notebook file');
            return;
          }
          const body = {
            metadata: data.metadata,
            'ui-specification': data['ui-specification'],
          }
          fetch(url, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(body),
          })
          .then(response => response.json())
          .then(data => {
            if (data.notebook) {
              window.location.reload();
            } else {
              alert('Error uploading notebook');
            }
          });
        } catch (e) {
          alert('Invalid notebook file');
          return;
        }
      }

    }
  }
  document.getElementById('upload-notebook-form').onsubmit = uploadNotebookHandler;
</script>